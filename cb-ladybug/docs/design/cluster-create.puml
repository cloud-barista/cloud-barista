@@startuml

header **Cloud-Barista Ladybug** (Espresso version)
title Create a cluster
hide footbox

actor		"User"			as user			#d1e0ff
participant	"Webtool"		as webtool		#d1e0ff

participant	"Ladybug"		as provider
database	"Ladybug data"	as db

participant	"Tumblebug"		as tumblebug	#d1e0ff
participant	"Spider"		as spider		#d1e0ff
participant	"Control plane"	as mNodes		#eeeeee
participant	"Worker nodes"	as wNodes		#eeeeee

skinparam sequence {
	GroupColor DeepSkyBlue
}

activate user
	user		->	webtool		: create a cluster

	activate webtool
		webtool		->	provider		: POST/ns/:ns/clusters/:cluster\n{name,\n controlPlaneNodeSpec,\n controlPlaneNodeCount,\n workerNodeSpec,\n workerNodeCount}


			' -- 1.infra
			activate provider

				'-- 1.1. vpc
				provider	->	tumblebug			: GET\n/ns/:ns/resources/vNet/:vpc
				activate tumblebug
					tumblebug	-->	provider		: ack {vpc}
				deactivate tumblebug

				alt if not exist vpc
					provider	->	tumblebug		: if exist\nPOST/ns/:ns/resources/vNet
					activate tumblebug
						tumblebug	->	spider		: POST /vpc
						activate spider
							tumblebug	<--	spider	: ack {vpc}
						deactivate spider
						tumblebug	-->	provider	: ack {vpc}
					deactivate tumblebug
				end

				'-- 1.2. sg(fw)
				provider	->	tumblebug			: GET\n/ns/:ns/resources/securityGroup/:sg
				activate tumblebug
					tumblebug	-->	provider		: ack {sg}
				deactivate tumblebug

				alt if not exist security group 
					provider	->	tumblebug		: POST\n/ns/:ns/resources/securityGroup
					activate tumblebug
						tumblebug	->	spider		: POST /securitygroup
						activate spider
							tumblebug	<--	spider	: ack {sg}
						deactivate spider
						tumblebug	-->	provider	: ack  {sg}
					deactivate tumblebug
				end

				'-- 1.3. ssh
				provider	->	tumblebug		: GET\n/ns/:ns/resources/sshKey/:key
				activate tumblebug
					tumblebug	-->	provider	: ack {keypair}
				deactivate tumblebug

				alt if not exist keypair
					provider	->	tumblebug	: POST\n/ns/:ns/resources/sshKey
					activate tumblebug
						tumblebug	->	spider		: POST /keypair
						activate spider
							tumblebug	<--	spider	: ack {keypair}
						deactivate spider
						tumblebug	-->	provider	: ack  {keypair}
					deactivate tumblebug
				end
				
				'-- 1.4. image
				provider	->	tumblebug			: GET\n/ns/:ns/resources/image/:image
				activate tumblebug
					tumblebug	-->	provider		: ack {image}
				deactivate tumblebug

				alt if not exist image
					provider	->	tumblebug 		: POST\n/ns/:ns/resources/image
					activate tumblebug
						tumblebug	->	spider		: POST /vmimage
						activate spider
							tumblebug	<--	spider	: ack {vmimage}
						deactivate spider
						tumblebug	-->	provider	: ack  {image}
					deactivate tumblebug
				end

				'-- 1.5. spec
				provider	->	tumblebug			: GET\n/ns/:ns/resources/spec/:spec
				activate tumblebug
					tumblebug	-->	provider		: ack {image}
				deactivate tumblebug

				alt if not exist spec
					provider	->	tumblebug 		: POST\n/ns/:ns/resources/spec
					activate tumblebug
						tumblebug	->	spider		: POST /spec
						activate spider
							tumblebug	<--	spider	: ack {spec}
						deactivate spider
						tumblebug	-->	provider	: ack  {spec}
					deactivate tumblebug
				end

				'-- 1.6. mcis
				loop Create MCIS (VMs)
					provider	->	tumblebug		: POST\n/mcis

					activate tumblebug
						tumblebug	->o	spider		: POST/vm
						activate spider
							tumblebug	<--	spider	: ack {vm}
						deactivate spider
						tumblebug	-->	provider 	: ack {vm}
					deactivate tumblebug
				end

			deactivate provider

			provider		->o	db					: insert {cluster}

			activate provider
				' -- 2.boostrap
				loop Bootstrap VMs
					provider	->	tumblebug		: bootstrap.sh (ssh)
					activate tumblebug
						tumblebug	->	wNodes		: ssh
						activate wNodes
							tumblebug	<--	wNodes	: ouput (console)
						deactivate wNodes
						provider	<--	tumblebug	: ouput (console)
					deactivate tumblebug
					provider	->	provider		: wait
				end
	
				' -- 3.provisioning
				loop Provisioning Nodes
					provider	->	tumblebug		: init
					activate tumblebug

						tumblebug	->	mNodes		: ssh
						activate mNodes
							tumblebug	<--	mNodes	: ouput (console)
						deactivate mNodes
						provider	<--	tumblebug	: ouput (console)

					deactivate tumblebug

					provider	->	provider		: resolve {join command, kubeconfig}
					provider	->	tumblebug		: join {join command}

					activate tumblebug

						tumblebug	->	wNodes		: ssh
						activate wNodes
							tumblebug	<--	wNodes	: ouput (console)
						deactivate wNodes
						provider	<--	tumblebug	: ouput (console)
					deactivate tumblebug
				end
			deactivate provider

			provider	->o	db						: update {cluster}
			provider	-->	webtool					: ack {cluster}

		webtool	-->	user	: result
	deactivate webtool

deactivate user

@@enduml