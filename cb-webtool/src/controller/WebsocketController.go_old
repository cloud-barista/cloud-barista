package controller

import (
	"fmt"
	"log"

	"io"
	"net"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/labstack/echo/v4"
	// "github.com/labstack/echo/v4/middleware"
	"github.com/gorilla/websocket"
	// "golang.org/x/net/websocket"

	"github.com/cloud-barista/cb-webtool/src/service"
	echotemplate "github.com/foolin/echo-template"
	echosession "github.com/go-session/echo-session"
)

var SpiderURL = os.Getenv("SPIDER_IP_PORT")
var TumbleBugURL = os.Getenv("TUMBLE_IP_PORT")
var DragonFlyURL = os.Getenv("DRAGONFLY_IP_PORT")
var LadyBugURL = os.Getenv("LADYBUG_IP_PORT")

var retryInterval = os.Getenv("KEEP_ALIVE_INTERVAL")
var checkInterval = 5

type FrameworkAlive struct {
	FrameworkName string    `json:"frameworkName"`
	IpPort        string    `json:"ipPort"`
	IsAlive       bool      `json:"isAlive"`
	Time          time.Time `json:"time"`
	Message       string
}

type ReceiveMessage struct {
	FrameworkName string
	IpPort        string
	Message       string
	Err           error
	IsAlive       bool
}

/*
   서버 올라갈 때  ( main.go 에서 비동기로 체크 method 호출)

   alive check 시작 ( 각 framework 별로 호출 )
    . for루프를 돌면서 계속 alive check
     -> 연결이 되면 store에 상태 저장
	    . 연결이 되지 않으면 connection이 nil이면 일정시간 뒤 다시 시도(retry)
     -> 상태 변경이 되면 echo store에 상태저장 (X)
	 -> 상태 변경이 되면 nutsdb에 저장(O)
	 . return 할 json 객체에 각 framework struct set
	 -> 상태가 동일하면 skip

   client에서 websocket으로 호출이 되면
   store에 저장된 상태갑이 있으면 해당 값 return 하고 초기화
   store에 저장된 상태값이 없으면 skip
   < return 은 json 으로>

   client에서 return 된json에서 각 값들을 추출하여
   vuex state에 저장

*/

// keep alive 체크 : 무한루프를 돌며 대상 서버가 살아있는지 체크
// 체크 결과를 store에 저장. session-store를 사용하기 때문에 echo.Context를 param으로 넘겨 줘야 함. 불편한데?? 로컬변수로 받아 쓸까?
// 소켓에서 체크결과 사용
func FrameworkAliveCheck() {
	//LadyBugURL = "52.197.30.209:8000" // ip변경으로 접근이 안되는 경우 Test
	// Interval
	checkInterval, _ = strconv.Atoi(retryInterval)

	SpiderAlive := FrameworkAlive{
		FrameworkName: "SPIDER",
		IpPort:        SpiderURL,
		IsAlive:       false,
	}

	spiderChannelResult := make(chan []byte)

	go reader(spiderChannelResult, SpiderAlive)

	TumblebugAlive := FrameworkAlive{
		FrameworkName: "TUMBLEBUG",
		IpPort:        TumbleBugURL,
		IsAlive:       false,
	}

	tumblebugChannelResult := make(chan []byte)

	go reader(tumblebugChannelResult, TumblebugAlive)

	// DragonflyAlive := FrameworkAlive{
	// 	FrameworkName : "DRAGONFLY",
	// 	IpPort : DragonFlyURL,
	// 	IsAlive : false
	// }

	// LadyAlive := FrameworkAlive{
	// 	FrameworkName: "LADYBUG",
	// 	IpPort:        LadyBugURL,
	// 	IsAlive:       false,
	// }

	// go keepAliveCheck(SpiderAlive)
	// go keepAliveCheck(TumblebugAlive, c)
	// go keepAliveCheck(DragonflyAlive, c)
	// go keepAliveCheck(LadyAlive, c)

	//go KeepAliveChannel(SpiderAlive)
	// go KeepAliveChannel(TumblebugAlive)
}

// 참조 : https://softwareengineering.stackexchange.com/questions/400094/best-way-to-take-multiple-tcp-connectons-read-the-incoming-data-and-send-that
func reader(channelResult chan []byte, frameworkAlive FrameworkAlive) {

	conn := GetTcpConnection(frameworkAlive)

	defer conn.Close()
	log.Println(" buff1")
	buff := make([]byte, 256)
	for {
		log.Println(" buff2")
		n, err := conn.Read(buff)
		if err == io.EOF {
			// We reached EOF, let’s close that goroutine
			log.Println(" buff3")
			break
		}
		if err != nil {
			log.Println("reading error:", err)
			continue
		}
		log.Printf(" data(%d bytes): %s\n", n, string(buff[:n])) //buf.String())

		// We copy the current byte slice to a new byte slice that is passed through the mux channel
		out := make([]byte, n)
		copy(out, buff)
		// We send the new byte slice back to the main goroutine that ranges over the muxChan data
		log.Println(" buff4 ", out)
		channelResult <- out
	}

	for data := range channelResult {
		log.Println(" conn result ", string(data), "\n")
	}
}

// connection이 nil 인경우 일정시간 후 다시 접속 시도
func retry(frameworkAlive FrameworkAlive) {
	log.Println("retry after ", frameworkAlive.FrameworkName, checkInterval)

	time.Sleep(time.Duration(checkInterval) * time.Second)
	// keepAliveCheck(frameworkAlive)
	GetTcpConnection(frameworkAlive)
}

// 일단 만들어 놓고 공통화하자
// Conn 생성. 에러발생시 일정시간 후 재시도
// 생성된 Conn return
func GetTcpConnection(frameworkAlive FrameworkAlive) net.Conn {
	log.Println("GetTcpConnection start ", frameworkAlive)
	conn, connErr := net.Dial("tcp", frameworkAlive.IpPort)
	if connErr != nil {
		log.Println("failed to conn error for ", frameworkAlive.FrameworkName, frameworkAlive.IpPort)
		log.Println(connErr)

		time.Sleep(time.Duration(checkInterval) * time.Second)
		conn = GetTcpConnection(frameworkAlive)
	}

	err := conn.(*net.TCPConn).SetKeepAlive(true) // conn 이 nil 이면 panic으로 빠짐.
	if err != nil {
		log.Println("return by SetKeepAlive ", frameworkAlive.FrameworkName)
		log.Println(err)

		time.Sleep(time.Duration(checkInterval) * time.Second)
		conn = GetTcpConnection(frameworkAlive)
	}

	err = conn.(*net.TCPConn).SetKeepAlivePeriod(time.Duration(checkInterval) * time.Second)
	if err != nil {
		log.Println("return by SetKeepAlivePeriod ", frameworkAlive.FrameworkName)
		log.Println(err)

		time.Sleep(time.Duration(checkInterval) * time.Second)
		conn = GetTcpConnection(frameworkAlive)
	}
	log.Println("GetTcpConnection end ", frameworkAlive)
	return conn
}

// func KeepAliveChannel(frameworkAlive FrameworkAlive) {
// 	reply := make(chan string)

// 	conn := GetTcpConnection(frameworkAlive)
// 	log.Println("conn info ", conn)
// 	go func() {
// 		buf := make([]byte, 1024)
// 		for {
// 			log.Println("before read ")
// 			n, err := conn.Read(buf)
// 			log.Println("after read ")
// 			if err != nil {
// 				log.Println(" read err ", err)
// 				reply <- err.Error()
// 				if io.EOF == err {
// 					log.Println(" close ")
// 					close(reply)
// 					return
// 				}
// 			}
// 			if n > 0 {
// 				log.Println("unexpected data : %s", buf[:n])
// 			}
// 		}
// 	}()

// 	for {
// 		select {
// 		case result := <-reply:
// 			log.Println("Connection dropped message", result)
// 			// if result == io.EOF {
// 			// 	fmt.Println("connection to server was closed")
// 			// 	return
// 			// }
// 			time.Sleep(time.Duration(checkInterval) * time.Second)
// 			break
// 		case <-time.After(time.Second * 1):
// 			log.Println("timeout 1 , still alive")
// 		}
// 	}
// }

// func KeepAliveChannel(frameworkAlive FrameworkAlive) {
// 	var conn net.Conn
// 	conn = GetTcpConnection(frameworkAlive)

// 	reply := make(chan string)
// 	go func() {
// 		var replyBuffer = make([]byte, 256)
// 		for {
// 			log.Println("KeepAliveChannel for ", frameworkAlive)
// 			frameworkAlive.Time = time.Now()

// 			// _, err := conn.Read(replyBuffer)
// 			n, err := conn.Read(replyBuffer)
// 			if err != nil {
// 				log.Println("err err")
// 				log.Println("Read from server failed:", err.Error())
// 				log.Println("Trying reset the connection...")
// 				// conn = GetTcpConnection(frameworkAlive)
// 				frameworkAlive.Message = "Error:" + err.Error()
// 				reply <- err.Error()
// 				close(reply)

// 			}
// 			log.Println("for for")
// 			log.Println(string(replyBuffer[:n])) // 데이터 출력

// 			for i, val := range replyBuffer {
// 				log.Println("frameworkAlive %s\n", val, frameworkAlive)
// 				if val == 13 { //13 is CR and marks the end of the message
// 					// reply = string(replyBuffer[:i])
// 					//reply <- string(replyBuffer[:i])
// 					reply <- "replyBuffer"
// 					log.Println("err " + string(replyBuffer[:i]))
// 					close(reply)
// 					// frameworkAlive.Message = reply
// 					break
// 				}
// 			}

// 			log.Println("reply from server=%s\n", reply)
// 			time.Sleep(time.Millisecond * time.Duration(checkInterval))
// 		}
// 	}()

// 	for {
// 		receiveMessage := <-reply
// 		time.Sleep(time.Duration(checkInterval) * time.Second)
// 		log.Println("receiveMessage ", receiveMessage, time.Now())
// 		log.Println("reply ", reply, frameworkAlive)
// 	}
// }

// interval 마다 alive check
func keepAliveCheck(frameworkAlive FrameworkAlive) {

	log.Println("keepAliveCheck ", frameworkAlive.IpPort)
	now := time.Now().Format("2006-01-02 15:04:05")
	log.Println(frameworkAlive.FrameworkName + " , " + frameworkAlive.IpPort + ", " + now)

	conn, connErr := net.Dial("tcp", frameworkAlive.IpPort)
	if connErr != nil {
		log.Println("return by conn error for ", frameworkAlive.FrameworkName, frameworkAlive.IpPort)
		log.Println(connErr)
		retry(frameworkAlive)
		return
	}
	//defer conn.Close()

	// conn, _ := net.Dial("tcp", TumbleBugURL)
	//
	err := conn.(*net.TCPConn).SetKeepAlive(true) // conn 이 nil 이면 panic으로 빠짐.
	if err != nil {
		log.Println("return by SetKeepAlive ", frameworkAlive.FrameworkName)
		log.Println(err)
		retry(frameworkAlive)
		return
	}

	err = conn.(*net.TCPConn).SetKeepAlivePeriod(time.Duration(checkInterval) * time.Second)
	if err != nil {
		log.Println("return by SetKeepAlivePeriod ", frameworkAlive.FrameworkName)
		log.Println(err)
		retry(frameworkAlive)
		return
	}

	// notify := make(chan error)

	// go func(c net.Conn) {
	// 	data := make([]byte, 4096) // 4096 크기의 바이트 슬라이스 생성
	// 	log.Println(" gogogo ")
	// 	for {
	// 		n, err := c.Read(data) // 서버에서 받은 데이터를 읽음
	// 		if err != nil {
	// 			log.Println(err)
	// 			return
	// 		}

	// 		log.Println(string(data[:n])) // 데이터 출력

	// 		time.Sleep(1 * time.Second)
	// 	}
	// }(conn)
	// http://pyrasis.com/book/GoForTheReallyImpatient/Unit56/02

	notify := make(chan error)

	go func() {
		buf := make([]byte, 1024)
		for {
			n, err := conn.Read(buf)
			if err != nil {
				notify <- err
				if io.EOF == err {
					close(notify)
					return
				}
			}
			if n > 0 {
				log.Println("unexpected data : %s", buf[:n])
			}

			time.Sleep(time.Duration(checkInterval) * time.Second)
			log.Println("conn.Read") // 이부분이 log로 찍히지 않음 why? 물어볼 것.
		}
	}()

	for {
		select {
		case err := <-notify:
			log.Println("Connection dropped message", err)
			if err == io.EOF {
				log.Println("connection to server was closed")
				return
			}
			break
		case <-time.After(time.Duration(checkInterval) * time.Second):
			log.Println(frameworkAlive.IpPort+" still alive interval=", checkInterval)
		}
	}

}

//FrameworkAlive
type WebSocket struct {
	// Framework alive 여부
	SpiderFrameworkAlive    FrameworkAlive `json:"spiderFrameworkAlive"`
	TumblebugFrameworkAlive FrameworkAlive `json:"tumblebugFrameworkAlive"`
	DragonflyFrameworkAlive FrameworkAlive `json:"dragonflyFrameworkAlive"`
	LadybugFrameworkAlive   FrameworkAlive `json:"ladybugFrameworkAlive"`

	// MCIS  : status 변경여부

	// VM : status 변경여부
}

func GetFrameAliveInfo(c echo.Context, frameworkName string) (FrameworkAlive, bool) {
	store := echosession.FromContext(c) // store내 param은 모두 소문자.
	//result, ok := store.Get(frameworkAlive.FrameworkName)
	result, ok := store.Get("frameworkalive")
	if !ok {
		return FrameworkAlive{}, ok
	}
	frameAliveMap := result.(map[string]FrameworkAlive)
	return frameAliveMap[frameworkName], ok
}

// 있으면 기존 state 와 비교하여 상태가 같으면 시간만 update, 다르면 웹소켓에서 사용할 수 있게 조치
func SetFrameAliveInfo(c echo.Context, frameworkAlive FrameworkAlive) {

	beforeFrameworkAlive, _ := GetFrameAliveInfo(c, frameworkAlive.FrameworkName)
	// if !ok {
	// 	beforeFrameworkAlive = FrameworkAlive{}
	// }

	if frameworkAlive.IsAlive != beforeFrameworkAlive.IsAlive {
		// 웹소켓에서 사용할 수 있게 조치.
	}

	frameworkAliveMap := make(map[string]interface{})
	frameworkAliveMap[frameworkAlive.FrameworkName] = frameworkAlive

	store := echosession.FromContext(c) // store내 param은 모두 소문자.
	store.Set("frameworkalive", frameworkAliveMap)
}

// Websocket 호출 Test form
func HelloForm(c echo.Context) error {
	fmt.Println("============== HelloForm ===============")

	loginInfo := service.CallLoginInfo(c)
	if loginInfo.UserID == "" {
		// Login 정보가 없으므로 login화면으로
		return c.Redirect(http.StatusTemporaryRedirect, "/login")
	}

	// ws, _ := upgrader.Upgrade(c.Response(), c.Request(), nil)
	// conn, err := websocket.Upgrade(w, r, w.Header(), 1024, 1024)
	conn, wserr := upgrader.Upgrade(c.Response(), c.Request(), nil)
	if wserr != nil {
		log.Println(wserr)
	}
	defer conn.Close()
	go Echo(conn)

	return echotemplate.Render(c, http.StatusOK,
		"WebsocketTest", // 파일명
		map[string]interface{}{})
}

// Gorilla WebSocket 호출 Test
var (
	upgrader = websocket.Upgrader{}
)

func HelloGorillaWebSocket(c echo.Context) error {
	ws, err := upgrader.Upgrade(c.Response(), c.Request(), nil)
	if err != nil {
		return err
	}
	defer ws.Close()

	for {
		//// Write

		// store에 저장된 keepAlive, mcisStatus, vmState of mcis
		// sendData := map[string]interface{}{
		// 	"event": "res",
		// 	"data":  nil,
		//  }
		// sendData["data"] = objmap["data"]
		// refineSendData, err := json.Marshal(sendData)
		// err = c.WriteMessage(mt, refineSendData)

		err := ws.WriteMessage(websocket.TextMessage, []byte("Hello, Gorilla Client!"))
		if err != nil {
			c.Logger().Error(err)
		}

		//// Read
		_, msg, err := ws.ReadMessage()
		if err != nil {
			c.Logger().Error(err)
		}
		fmt.Printf("%s\n", msg)
	}
}

// Listener 에서 감지된 Data 변경을 UI 로 push
// func GorillaWebSocketPush(c echo.Context) error {
// 	err := c.WriteMessage(ws.TextMessage, {message})
// }

type pushMessage struct {
	pushpush string
}

func Echo(conn *websocket.Conn) {
	for {
		//m := pushMessage{pushpush: "echo"}

		// err := conn.ReadJSON(&m)
		// if err != nil {
		//     fmt.Println("Error reading json.", err)
		// }

		// fmt.Printf("Got message: %#v\n", m)

		// if err = conn.WriteJSON(m); err != nil {
		// 	fmt.Println(err)
		// }

		// m := msg{}
		// err := conn.ReadJSON(&m)

		err := conn.WriteMessage(websocket.TextMessage, []byte("Echo push"))
		if err != nil {
			// c.Logger().Error(err)
			// fmt.Printf(err)
			log.Println(err)
		}
	}
}
