<!doctype html>
<html lang="ko">
	<head>
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="format-detection" content="telephone=no">
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=yes,target-densitydpi=medium-dpi" />
		<title>CLOUD BARISTA</title>
		
		<link rel="stylesheet" href="/assets/js/bootstrap-4.5.2/css/bootstrap.min.css"/>
		<link rel="stylesheet" href="/assets/css/login.css"/>
		
		<script src="/assets/js/jquery-1.11.0/jquery.min.js"></script>
		<script src="/assets/js/bootstrap-4.5.2/js/bootstrap.min.js"></script>
		<script src="/assets/js/jquery.scrollbar.js"></script>
		<script src="/assets/js/common.js"></script>
		<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
		<!--[if lt IE 9]><script src="../js/html5shiv.js"></script><![endif]-->
	 </head>
     <body class="bg_login">
 	
        <div class="loginarea">
        
            <div class="logintop">
               <div class="loginbox">
                   <input type="hidden" id="sel_ns" />
                   <div class="loginlogo"><img src="/assets/img/common/img_login_t.png" alt="Cloud Barista"></div>
                   <div class="title"><span>C</span>loud <span>B</span>arista</div>
                   <!-- Input -->
                   <div class="ipbox">
                       <ul>
                           <li class="form-label-group"><label class>Account(ID)</label><input type="text" name="" id="email" value="" placeholder="Input /Account(ID)" title="" autofocus /></li>
                           <li class="form-label-group"><label>Password</label><input type="password" name="" id="password" value="" placeholder="Input /Password (*****)" title="" onkeydown="enterkey();"/></li>
                       </ul>
                       <div class="ch"><input type="checkbox" name="" value="" id="ip_ch" title="" /><label for="ip_ch"><span></span> Remenber me</label></div>
                       <div class="btnbox">
                           <div class="btn_pw"><a href="#">Lost your password?</a>  <span>I</span> <a href="#">Sign Up</a></div>
                           <button name="" value="" class="btn_login" data-toggle="modal" data-target id="sign_btn">Login</button> 
                       </div>
                   </div>
                   <!-- //Input -->
               </div>	
           </div>
       
           <!-- Login footer area-->
           {{template "LoginFooter" .}}       
               
           <!-- Login footer area-->
       </div>
       
       <!-- required -->
       <div class="modal fade" id="required" tabindex="-1" role="dialog" aria-hidden="true">
           <div class="modal-dialog" role="document">
               <div class="modal-content">
                   
                   <div class="modal-body">
                       <div class="txt">ID/Password required !</div>
                       <div class="btnbox">
                           <button type="button" class="btn_ok" data-toggle="modal" data-target="#idpwLost">OK</button>
                       </div>
                   </div>
                   
               </div>
           </div>
                   
       </div>
       <!-- //required -->
       
       <!-- id/password lost -->
       <div class="modal fade" id="idpwLost" tabindex="-1" role="dialog" aria-hidden="true">
           <div class="modal-dialog" role="document">
                   <div class="modal-content">
                       
                   
                   <div class="modal-body">
                       <div class="txt"><span>Illegal account / password</span> 다시 입력 하시겠습니까?</div>
                       <div class="btnbox">
                           <button type="button" class="btn_cancel" data-dismiss="modal">Cancel</button>
                           <button type="button" class="btn_ok" data-toggle="modal" data-target="#popLogin">OK</button>
                       </div>
                   </div>
               </div>
           </div>
                   
       </div>
       <!-- //id/password lost -->
       
       <!-- Cloud Connection / Select NS (NameSpace) input -->
       <div class="modal fade" id="popLogin" tabindex="-1" role="dialog" aria-hidden="true">
           
           <div class="modal-dialog popupBody">
               <div class="modal-content">
                   
                   <div class="modal-body scrollbar-inner">
                           
                       <div class="wbox">	
                           
                           <!-- Cloud Connection -->
                          
                           <!-- <div class="popbox popboxCO">
                               <div class="popcont">
                                   <div class="titlebox">
                                       <div class="tit"><span>Select Cloud</span> Connection</div>
                                       <div class="txt">대상 클라우드 연결을 선택 또는 생성해 주세요</div>
                                   </div>  -->
                                   
                                <!-- list -->
                                  <!-- <div class="cloudlist">
                                       <div class="listbox scrollbar-inner" id="cloudList">
                                           
                                           <div class="list">
                                               <div class="stit">Cloud Connection 1</div>
                                               <div class="stxt">Cloud Provider / Region</div>
                                           </div>	
                                           
                                           
                                               
                                       </div>
                                   </div> -->
                                   <!-- list -->
                                   
                                   <!-- add -->
                                   <!-- <div class="addbox">
                                       <div class="txt">or <span>Add</span> new Connection</div>
                                       <button name="" value="" class="btn_add" id="btn_add1">ADD +</button> 
                                   </div>
                                   
                                   <div class="add_ipbox">
                                       
                                       <div class="iplist">
                                           <ul>
                                               <li><label class="chk">Type New Config Name</label><input type="text" name="" value="" placeholder="Input Name" title="" id="ConfigName"/></li>
                                               <li>
                                                   <label class="chk">Provider</label>
                                                   <select title="" id='ProviderName' name='ProviderName' onchange="changeProvider('{{ .comURL.SpiderURL}}',this.value)">
                                                       <option>Select Provider</option>
                                                   </select>
                                               </li>
                                               <li>
                                                <label class="chk">Select Driver</label>
                                                <select title="" id="DriverName" name="DriverName">
                                                    <option>Select Driver</option>
                                                </select>
                                            </li>
                                               <li>
                                                   <label class="chk">Select Credential</label>
                                                   <select title="" id="CredentialName" name="CredentialName">
                                                       <option>Select Credential</option>
                                                   </select>
                                               </li>
                                               <li>
                                                   <label class="chk">Select Region</label>
                                                   <select title="" class="select" id="RegionName" name="RegionName">
                                                       
                                                   </select>
                                               </li>
                                           </ul>
                                       
                                           <div class="btnbox">
                                               <button name="" value="" class="btn_create" onclick="createConfig()">Create</button>
                                               <button name="" value="" class="btn_clear">Clear</button>
                                           </div>
                                           
                                       </div>
                                       
                                   </div> -->
                                   <!-- add -->
                                   
                               <!-- </div>
                           </div> -->
                           <!-- //Cloud Connection -->
<!--                            
                           <div class="arr"></div> -->
                           
                           <!-- Select NS (NameSpace) -->
                           <div class="popbox popboxNS">
                               <div class="popcont">
                                   <div class="titlebox">
                                       <div class="tit"><span>Select NS</span> (NameSpace)</div>
                                       <div class="txt">사용자의 작업 영역을 선택 또는 생성해 주세요</div>
                                   </div>
                                   
                                   <!-- list -->
                                   <div class="cloudlist">
                                       <div class="listbox scrollbar-inner" id="nsList">
                                           
                                           
                                               
                                       </div>
                                   </div>
                                   <!-- //list -->
                                   
                                   <!-- add -->
                                   <div class="addbox">
                                       <div class="txt">or <span>Add</span> new NameSpace</div>
                                       <button name="" value="" class="btn_add" id="btn_add2">ADD +</button> 
                                   </div>
                                   
                                   <div class="add_ipbox">
                                       
                                       <div class="iplist">
                                           <ul>
                                               <li><label class="chk">Type New NS Name</label><input type="text" name="" id="namespace" value="" placeholder="Input Name" title="" /></li>
                                               <li>
                                                   <label>Type Description</label>
                                                   <textarea  cols="" rows="" placeholder="Input Description" id="nsDesc"title=""></textarea>
                                               </li>
                                           </ul>
                                       
                                           <div class="btnbox">
                                               <button name="" value="" class="btn_create" id="ns_create_btn" onclick="createNS()">Create</button>
                                               <button name="" value="" class="btn_clear">Clear</button>
                                           </div>
                                           
                                       </div>
                                       
                                   </div>
                                   <!-- //add -->
                                   
                               </div>
                           </div>
                           <!-- //Select NS (NameSpace) -->
                           
                       </div>
                       
                       
                       <button name="" value="" class="btn_ok" data-dismiss="modal" onclick="clickOK();">OK</button> 
                       
                   </div>
                   
               </div>
               
           </div>
           
       </div>
       <!-- //Cloud Connection / Select NS (NameSpace) input -->
       
      
   
    </body>
</html>
<script>

function enterkey() {
        if (window.event.keyCode == 13) {
             // 엔터키가 눌렸을 때 실행할 내용
             $("#sign_btn").click();
        }
}


$(document).ready(function(){
   // var apiInfo = ApiIn
   var apiInfo = "{{ .apiInfo}}";
   console.log("api Info : ", apiInfo)
    axios.post("/regUser",{headers: { 'Content-type': 'application/json',
    'Authorization': apiInfo, }
     }).then(result =>{
            console.log(result);
        });
   // var nsUrl = "http://localhost:1234/"
    $("#sign_btn").on("click",function(){
        
        try{
        // alert("test")
            var username = $("#email").val();
            var password = $("#password").val();
            if(!password || !username){
                $("#required").modal()
                return;
            }
            if (password && username){
               
            }
            var req = {
                username : username,
                password : password,
            };
            console.log(req)
            axios.post("/login/proc",{headers: { 'Content-type': 'application/json', 'Authorization': apiInfo,}
            ,username:username,password:password }).then(result =>{
                console.log(result);
                if(result.status == 200){
                    
                    
                    alert("Login Success");
                    $("#popLogin").modal()
                    
                    getConfig();
                    getNameSpace();
                }else{
                    alert("ID or PASSWORKD MISMATCH!!Check yourself!!")
                    location.reload(true);

                }
            }).catch(function(error){
                console.log("login error : ",error);
                alert("ID or PASSWORKD MISMATCH!!Check yourself!!")
                location.reload(true);
            })
        }catch(e){
                alert(e);
        }

    })
   
})


</script>
 <script>
    $(function() {
      return $(".modal").on("show.bs.modal", function() {
        var curModal;
        curModal = this;
        $(".modal").each(function() {
          if (this !== curModal) {
            $(this).modal("hide");
          }
        });
      });
    });
    function getConfig(){
        // var spiderURL =  "{{ .comURL.SpiderURL}}"
        // var connectionURL =spiderURL+"/connectionconfig"
        // var apiInfo = "{{ .apiInfo}}";
        // axios.get(connectionURL,{
        //     headers : {
        //         'Authorization': apiInfo 
        //     }
        // }).then(result=>{
        //     console.log("get Connection config Data : ",result.data);
        //     var data = result.data.connectionconfig;
        //     var html = ""
            
        //     if(data){
        //         data.map(item=>(
        //             html += '<div class="list">'
        //                     +'<div class="stit">'+item.ConfigName+'</div>'
        //                     +'<div class="stxt">'+item.ProviderName+' / '+item.RegionName+' </div>'
        //                     +'</div>'
        //         ))
        //         $("#cloudList").empty()
        //         $("#cloudList").append(html)
        //        configModal()
        //     }
        // })
        var connectionURL = "/connectionconfig"
        axios.get(connectionURL,{
        }).then(result=>{
            console.log("get Connection config Data : ",result.data);
            // console.log("get Connection config Data : ",result);
            var data = result.data.connectionconfig;
            var html = ""
            
            if(data){
                data.map(item=>(
                    html += '<div class="list">'
                            +'<div class="stit">'+item.ConfigName+'</div>'
                            +'<div class="stxt">'+item.ProviderName+' / '+item.RegionName+' </div>'
                            +'</div>'
                ))
                $("#cloudList").empty()
                $("#cloudList").append(html)
               configModal()
            }
        })
    }
    function configModal(){
        $(".popboxCO .cloudlist .list").each(function () {
            $(this).click(function () {
                var $list = $(this);
                var $popboxNS = $(".popboxNS");
                var $arr = $('#popLogin .arr');
                var $ok = $(".btn_ok");
                    $popboxNS.fadeIn();
                    $arr.fadeIn();
                $list.addClass('selected');
                $list.siblings().removeClass("selected");
                $list.off("click").click(function(){
                    if( $(this).hasClass("selected") ) {
                        $popboxNS.stop().fadeOut();
                        $arr.stop().fadeOut();
                        $ok.stop().fadeOut();
                        $list.removeClass("selected");
                    } else {
                        $popboxNS.stop().fadeIn();
                        $arr.stop().fadeIn();
                        $list.addClass("selected");
                        $list.siblings().removeClass("selected");
                    }
                });
            });
        }); 

      
    }
    function createNS(){
        var namespace = $("#namespace").val()
        var desc = $("#nsDesc").val()
        var apiInfo = "{{ .apiInfo}}";
        var url = "{{ .comURL.TumbleBugURL}}"+"/ns";
        var obj = {
            name: namespace,
            description : desc
        }
        if(namespace){
            axios.post(url,obj,{
                headers: { 
                    'Content-type': 'application/json',
                    'Authorization': apiInfo, 
                }
            }).then(result =>{
                console.log(result);
                if(result.status == 200 || result.status == 201){
                    alert("Success Create NameSpace")
                    getNameSpace();
                    $("#btn_add2").click()
                    $("#namespace").val('')
                    $("#nsDesc").val('')
                }else{
                    alert("Fail Create NameSpace")
                }
            }).catch(function (error) {
                if (error.response) {
                    // 서버가 2xx 외의 상태 코드를 리턴한 경우
                //error.response.headers / error.response.status / error.response.data
                    alert("There is a problem communicating with cb-tumblebug server\nCheck the cb-tumblebug server\nCall Url : " + url + "\nStatus Code : " + error.response.status);
                }
                else if (error.request) {
                    // 응답을 못 받음
                    alert("No response was received from the cb-tumblebug server.\nCheck the cb-tumblebug server\nCall Url : " + url);
                }
                else {
                    alert("Error communicating with cb-tumblebug server.\n" + error.message);
                }
                //console.log(error.config);
            });
        }else{
            alert("Input NameSpace")
            $("#namespace").focus()
            return;
        }
    }

    function createConfig(){
        var ConfigName = $("#ConfigName").val()
        var ProviderName = $("#ProviderName").val()
        var DriverName = $("#DriverName").val()
        var CredentialName = $("#CredentialName").val()
        var RegionName = $("#RegionName").val()
        var apiInfo = "{{ .apiInfo}}"; 
        var spiderURL =  "{{ .comURL.SpiderURL}}"
        var url = spiderURL+"/connectionconfig";

        var obj = {
            ConfigName,
            ProviderName,
            DriverName,
            CredentialName,
            RegionName
        }
        //validation check
        if(!ConfigName){
            alert("Input New Config Name")
            $("#ConfigName").focus()
            return;
        }
        if(!ProviderName){
            alert("Input New ProviderName")
            $("#ProviderName").focus()
            return;
        }
        if(!DriverName){
            alert("Input New DriverName")
            $("#DriverName").focus()
            return;
        }
        if(!CredentialName){
            alert("Input New CredentialName")
            $("#CredentialName").focus()
            return;
        }
        if(!RegionName){
            alert("Input New RegionName")
            $("#RegionName").focus()
            return;
        }
        if(ConfigName && ProviderName && DriverName && CredentialName && RegionName){
            axios.post(url,obj,{
                headers: { 
                    'Content-type': 'application/json',
                    'Authorization': apiInfo, 
                }
            }).then(result =>{
                console.log(result);
                if(result.status == 200 || result.status == 201){
                    alert("Success Create Connection Config")
                    getConfig()
                    $("#btn_add1").click()
                    $("#ConfigName").val('')
                    $("#ProviderName").val('')
                    $("#DriverName").val('')
                    $("#CredentialName").val('')
                    $("#RegionName").val('')
                }else{
                    alert("Fail Create Connection Config")
                }
            });
        }
    }


    /* scroll */
    $(document).ready(function(){
        //csp List 미리 가져와서 붙여 놓기
        var spiderURL =  "{{ .comURL.SpiderURL}}"
        var apiInfo = "{{ .apiInfo}}";
        //alert("login.html");
        //getCloudOS(spiderURL,apiInfo,'ProviderName')

        $('.scrollbar-inner').scrollbar();

        if($(window).width() > 1024) {
            $("#popLogin .modal-body").removeClass("scrollbar-inner");
        } else {
            $("#popLogin .modal-body").addClass("scrollbar-inner");
        }
    
        $(window).resize(function (){
            if($(window).width() > 1024) {
                $("#popLogin .modal-body").removeClass("scrollbar-inner");
            } else {
                $("#popLogin .modal-body").addClass("scrollbar-inner");
            }
        });
    });

        
    $(".popbox").each(function(){
        var $ipbox = $(this);
        var $add_ipbox = $ipbox.find('.add_ipbox');
        $ipbox.find('.btn_add').click(function(){
            if( $(this).html() == 'ADD +' ) {
          $(this).html('HIDE -');
                $add_ipbox.fadeIn();
        } else {
          $(this).html('ADD +');
                $add_ipbox.fadeOut();
        }
        });
    });


// function getCloudOS(url, apiInfo, target){
//     var req_url = url+"/cloudos"
//     var initCSP = ""
//     axios.get(req_url,{
//     headers:{
//             'Authorization': apiInfo
//         }
//     }).then(result=>{
//         var data = result.data.cloudos
//         var html =""
//         if(data){
//             html += "<option>Select Provider</option>"
//             data.map(csp=>(html += '<option value="'+csp+'">'+csp+'</option>'))
//         }

//         $("#"+target).empty()
//         $("#"+target).append(html)

//         initCSP = data[0]

//         changeProvider(url,initCSP)
//     }) 
// }

function getCloudDriver(url, csp, target){
    var req_url = url+"/driver"
    axios.get(req_url,{
    headers:{
            'Authorization': "{{ .apiInfo}}"
        }
    }).then(result=>{
        var data = result.data.driver
        var html =""
        if(data){
            html += "<option>Select Driver</option>"
            data.filter(item=> csp === item.ProviderName).map(dr=>(html += '<option value="'+dr.DriverName+'">'+dr.DriverName+'</option>'))
        }
        if(data.length == 0)
        {
            html +="<option>No select Value</option>"
        }
        $("#"+target).empty()
        $("#"+target).append(html)
    }) 

}

function getCloudCredential(url, csp, target){
    var req_url = url+"/credential"
    axios.get(req_url,{
    headers:{
            'Authorization': "{{ .apiInfo}}"
        }
    }).then(result=>{
        var data = result.data.credential
        var html =""
        if(data){
            html += "<option>Select Credential</option>"
            data.filter(item=> csp === item.ProviderName).map(cr=>(html += '<option value="'+cr.CredentialName+'">'+cr.CredentialName+'</option>'))
        }
        if(data.length == 0)
        {
            html +="<option>No select Value</option>"
        }
        $("#"+target).empty()
        $("#"+target).append(html)
    }) 

}
function nsModal(){
    $(".popboxNS .cloudlist .list").each(function () {
        $(this).click(function () {
            var $list = $(this);
            var $ok = $(".btn_ok");
                $ok.fadeIn();
            $list.addClass('selected');
            $list.siblings().removeClass("selected");
            $list.off("click").click(function(){
                if( $(this).hasClass("selected") ) {
                    $ok.stop().fadeOut();
                    $list.removeClass("selected");
                } else {
                    $ok.stop().fadeIn();
                    $list.addClass("selected");
                    $list.siblings().removeClass("selected");
                }
            });
        });
    });
}
function getCloudRegion(url, csp, target){
    var req_url = url+"/region"
    axios.get(req_url,{
    headers:{
            'Authorization': "{{ .apiInfo}}"
        }
    }).then(result=>{
        var data = result.data.region
        var html =""
        if(data){
            html ="<option>Select Region</option>"
            data.filter(item=> csp === item.ProviderName).map(rg=>(html += '<option value="'+rg.RegionName+'">'+rg.RegionName+'</option>'))
        }
        if(data.length == 0)
        {
            html +="<option>No select Value</option>"
        }
        $("#"+target).empty()
        $("#"+target).append(html)
    }) 

}
function isEmpty(str){
         if(typeof str == "undefined" || str == null || str == "")
             return true;
         else
             return false ;
}

function getNameSpace(){
    var url = "{{ .comURL.TumbleBugURL}}"+"/ns";
    axios.get(url,{
        headers:{
            'Authorization': "{{ .apiInfo}}",
            'Content-Type' : "application/json"
        }
    }).then(result=>{
        console.log("get NameSpace Data : ",result.data);        
        var data = result.data.ns;
        var html = ""

        //최초 로그인시에는 호출되지 않도록 버그 수정
        if(!isEmpty(data) && data.length){
            data.filter((list)=> list.name !== "" ).map((item,index)=>(
                html += '<div class="list" onclick="selectNS(\''+item.id+'\');">'
                    +'<div class="stit">'+item.name+'</div>'
                    +'<div class="stxt">'+item.description+' </div>'
                    +'</div>'                
            ))
            $("#nsList").empty();
            $("#nsList").append(html);
            nsModal()
           
    }}
) .catch(function (error) {
        if (error.response) {
            // 서버가 2xx 외의 상태 코드를 리턴한 경우
        //error.response.headers / error.response.status / error.response.data
            alert("There is a problem communicating with cb-tumblebug server\nCheck the cb-tumblebug server\nCall Url : " + url + "\nStatus Code : " + error.response.status);
        }
        else if (error.request) {
            // 응답을 못 받음
            alert("No response was received from the cb-tumblebug server.\nCheck the cb-tumblebug server\nCall Url : " + url);
        }
        else {
            alert("Error communicating with cb-tumblebug server.\n" + error.message);
        }
        //console.log(error.config);
    })
}
function changeProvider(spiderURL, csp){
    getCloudRegion(spiderURL,csp,'RegionName')
    getCloudCredential(spiderURL,csp,'CredentialName')
    getCloudDriver(spiderURL,csp,"DriverName")
}

function clickOK(){
    var select_ns =   $("#sel_ns").val();
    console.log("slect ns is : ",select_ns);
    setNS(select_ns);
   
}
function setNS(nsid){
      
        if(nsid){
            reqUrl = "/SET/NS/"+nsid;
            console.log(reqUrl);
            axios.get(reqUrl,{
                headers:{
                    'Authorization': "{{ .apiInfo}}"
                }
            }).then(result=>{
                var data = result.data
                console.log(data);
                location.href = "/Dashboard/NS"
             })
        }else{
            alert("NameSpace가 등록되어 있지 않습니다.\n등록페이지로 이동합니다.")
            
        }
        
    } 
function selectNS(ns){
    console.log("select namespace : ",ns)
    $("#sel_ns").val(ns);
}
</script>