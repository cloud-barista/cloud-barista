basePath: /tumblebug
definitions:
  common.ConfigInfo:
    properties:
      id:
        example: configid01
        type: string
      name:
        example: spider
        type: string
      value:
        example: http://localhost:1024/spider
        type: string
    type: object
  common.IID:
    properties:
      nameId:
        description: NameID by user
        type: string
      systemId:
        description: SystemID by CloudOS
        type: string
    type: object
  common.KeyValue:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  common.NsInfo:
    properties:
      description:
        example: Description for this namespace
        type: string
      id:
        example: namespaceid01
        type: string
      name:
        example: namespacename01
        type: string
    type: object
  common.NsReq:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  common.RestGetAllConfigResponse:
    properties:
      config:
        description: Name string     `json:"name"`
        items:
          $ref: '#/definitions/common.ConfigInfo'
        type: array
    type: object
  common.RestGetAllNsResponse:
    properties:
      ns:
        description: Name string     `json:"name"`
        items:
          $ref: '#/definitions/common.NsInfo'
        type: array
    type: object
  common.SimpleMsg:
    properties:
      message:
        example: Any message
        type: string
    type: object
  mcir.FilterSpecsByRangeRequest:
    properties:
      cost_per_hour:
        $ref: '#/definitions/mcir.Range'
      ebs_bw_Mbps:
        $ref: '#/definitions/mcir.Range'
      evaluationScore_01:
        $ref: '#/definitions/mcir.Range'
      evaluationScore_02:
        $ref: '#/definitions/mcir.Range'
      evaluationScore_03:
        $ref: '#/definitions/mcir.Range'
      evaluationScore_04:
        $ref: '#/definitions/mcir.Range'
      evaluationScore_05:
        $ref: '#/definitions/mcir.Range'
      evaluationScore_06:
        $ref: '#/definitions/mcir.Range'
      evaluationScore_07:
        $ref: '#/definitions/mcir.Range'
      evaluationScore_08:
        $ref: '#/definitions/mcir.Range'
      evaluationScore_09:
        $ref: '#/definitions/mcir.Range'
      evaluationScore_10:
        $ref: '#/definitions/mcir.Range'
      gpumem_GiB:
        $ref: '#/definitions/mcir.Range'
      max_num_storage:
        $ref: '#/definitions/mcir.Range'
      max_total_storage_TiB:
        $ref: '#/definitions/mcir.Range'
      mem_GiB:
        $ref: '#/definitions/mcir.Range'
      net_bw_Gbps:
        $ref: '#/definitions/mcir.Range'
      num_core:
        $ref: '#/definitions/mcir.Range'
      num_gpu:
        $ref: '#/definitions/mcir.Range'
      num_storage:
        $ref: '#/definitions/mcir.Range'
      num_vCPU:
        $ref: '#/definitions/mcir.Range'
      storage_GiB:
        $ref: '#/definitions/mcir.Range'
    type: object
  mcir.Range:
    properties:
      max:
        type: number
      min:
        type: number
    type: object
  mcir.RestFilterSpecsResponse:
    properties:
      spec:
        items:
          $ref: '#/definitions/mcir.TbSpecInfo'
        type: array
    type: object
  mcir.RestGetAllImageResponse:
    properties:
      image:
        items:
          $ref: '#/definitions/mcir.TbImageInfo'
        type: array
    type: object
  mcir.RestGetAllSecurityGroupResponse:
    properties:
      securityGroup:
        items:
          $ref: '#/definitions/mcir.TbSecurityGroupInfo'
        type: array
    type: object
  mcir.RestGetAllSpecResponse:
    properties:
      spec:
        items:
          $ref: '#/definitions/mcir.TbSpecInfo'
        type: array
    type: object
  mcir.RestGetAllSshKeyResponse:
    properties:
      sshKey:
        items:
          $ref: '#/definitions/mcir.TbSshKeyInfo'
        type: array
    type: object
  mcir.RestGetAllVNetResponse:
    properties:
      vNet:
        items:
          $ref: '#/definitions/mcir.TbVNetInfo'
        type: array
    type: object
  mcir.RestLookupImageRequest:
    properties:
      connectionName:
        type: string
    type: object
  mcir.RestLookupSpecRequest:
    properties:
      connectionName:
        type: string
    type: object
  mcir.RestSearchImageRequest:
    properties:
      keywords:
        items:
          type: string
        type: array
    type: object
  mcir.SpiderGpuInfo:
    properties:
      count:
        type: string
      mem:
        type: string
      mfr:
        type: string
      model:
        type: string
    type: object
  mcir.SpiderImageInfo:
    properties:
      guestOS:
        description: Windows7, Ubuntu etc.
        type: string
      iid:
        $ref: '#/definitions/common.IID'
        description: Fields for response
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        description: Fields for request
        type: string
      status:
        description: available, unavailable
        type: string
    type: object
  mcir.SpiderImageList:
    properties:
      image:
        items:
          $ref: '#/definitions/mcir.SpiderImageInfo'
        type: array
    type: object
  mcir.SpiderSecurityRuleInfo:
    properties:
      direction:
        type: string
      fromPort:
        type: string
      ipProtocol:
        type: string
      toPort:
        type: string
    type: object
  mcir.SpiderSpecInfo:
    properties:
      gpu:
        items:
          $ref: '#/definitions/mcir.SpiderGpuInfo'
        type: array
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      mem:
        type: string
      name:
        type: string
      region:
        type: string
      vcpu:
        $ref: '#/definitions/mcir.SpiderVCpuInfo'
    type: object
  mcir.SpiderSpecList:
    properties:
      vmspec:
        items:
          $ref: '#/definitions/mcir.SpiderSpecInfo'
        type: array
    type: object
  mcir.SpiderSubnetInfo:
    properties:
      iid:
        $ref: '#/definitions/common.IID'
        description: '{NameId, SystemId}'
      ipv4_CIDR:
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
    type: object
  mcir.SpiderSubnetReqInfo:
    properties:
      ipv4_CIDR:
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        type: string
    type: object
  mcir.SpiderVCpuInfo:
    properties:
      clock:
        description: GHz
        type: string
      count:
        type: string
    type: object
  mcir.TbImageInfo:
    properties:
      connectionName:
        type: string
      creationDate:
        type: string
      cspImageId:
        type: string
      cspImageName:
        type: string
      description:
        type: string
      guestOS:
        description: Windows7, Ubuntu etc.
        type: string
      id:
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        type: string
      status:
        description: available, unavailable
        type: string
    type: object
  mcir.TbImageReq:
    properties:
      connectionName:
        type: string
      cspImageId:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  mcir.TbSecurityGroupInfo:
    properties:
      connectionName:
        type: string
      cspSecurityGroupId:
        type: string
      cspSecurityGroupName:
        type: string
      description:
        type: string
      firewallRules:
        items:
          $ref: '#/definitions/mcir.SpiderSecurityRuleInfo'
        type: array
      id:
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        type: string
      vNetId:
        type: string
    type: object
  mcir.TbSecurityGroupReq:
    properties:
      connectionName:
        type: string
      description:
        type: string
      firewallRules:
        items:
          $ref: '#/definitions/mcir.SpiderSecurityRuleInfo'
        type: array
      name:
        type: string
      vNetId:
        type: string
    type: object
  mcir.TbSpecInfo:
    properties:
      connectionName:
        type: string
      cost_per_hour:
        type: number
      cspSpecName:
        type: string
      description:
        type: string
      ebs_bw_Mbps:
        type: integer
      evaluationScore_01:
        type: number
      evaluationScore_02:
        type: number
      evaluationScore_03:
        type: number
      evaluationScore_04:
        type: number
      evaluationScore_05:
        type: number
      evaluationScore_06:
        type: number
      evaluationScore_07:
        type: number
      evaluationScore_08:
        type: number
      evaluationScore_09:
        type: number
      evaluationScore_10:
        type: number
      evaluationStatus:
        type: string
      gpu_model:
        type: string
      gpu_p2p:
        type: string
      gpumem_GiB:
        type: integer
      id:
        type: string
      max_num_storage:
        type: integer
      max_total_storage_TiB:
        type: integer
      mem_GiB:
        type: integer
      name:
        type: string
      net_bw_Gbps:
        type: integer
      num_core:
        type: integer
      num_gpu:
        type: integer
      num_storage:
        type: integer
      num_vCPU:
        type: integer
      orderInFilteredResult:
        type: integer
      os_type:
        type: string
      storage_GiB:
        type: integer
    type: object
  mcir.TbSpecReq:
    properties:
      connectionName:
        type: string
      cspSpecName:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  mcir.TbSshKeyInfo:
    properties:
      connectionName:
        type: string
      cspSshKeyName:
        type: string
      description:
        type: string
      fingerprint:
        type: string
      id:
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        type: string
      privateKey:
        type: string
      publicKey:
        type: string
      username:
        type: string
    type: object
  mcir.TbSshKeyReq:
    properties:
      connectionName:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  mcir.TbVNetInfo:
    properties:
      cidrBlock:
        type: string
      connectionName:
        type: string
      cspVNetId:
        type: string
      cspVNetName:
        type: string
      description:
        type: string
      id:
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        type: string
      status:
        type: string
      subnetInfoList:
        items:
          $ref: '#/definitions/mcir.SpiderSubnetInfo'
        type: array
    type: object
  mcir.TbVNetReq:
    properties:
      cidrBlock:
        type: string
      connectionName:
        type: string
      description:
        type: string
      name:
        type: string
      subnetInfoList:
        items:
          $ref: '#/definitions/mcir.SpiderSubnetReqInfo'
        type: array
    type: object
  mcis.AgentInstallContent:
    properties:
      mcis_id:
        type: string
      result:
        type: string
      vm_id:
        type: string
      vm_ip:
        type: string
    type: object
  mcis.AgentInstallContentWrapper:
    properties:
      result_array:
        items:
          $ref: '#/definitions/mcis.AgentInstallContent'
        type: array
    type: object
  mcis.AutoAction:
    properties:
      actionType:
        type: string
      placement_algo:
        type: string
      postCommand:
        $ref: '#/definitions/mcis.McisCmdReq'
      vm:
        $ref: '#/definitions/mcis.TbVmInfo'
    type: object
  mcis.AutoCondition:
    properties:
      evaluationPeriod:
        description: evaluationPeriod
        type: string
      evaluationValue:
        items:
          type: string
        type: array
      metric:
        type: string
      operand:
        description: 10, 70, 80, 98, ...
        type: string
      operator:
        description: <, <=, >, >=, ...
        type: string
    type: object
  mcis.BenchmarkInfo:
    properties:
      desc:
        type: string
      elapsed:
        type: string
      result:
        type: string
      resultarray:
        description: struct-element cycle ?
        items:
          $ref: '#/definitions/mcis.BenchmarkInfo'
        type: array
      specid:
        type: string
      unit:
        type: string
    type: object
  mcis.BenchmarkInfoArray:
    properties:
      resultarray:
        items:
          $ref: '#/definitions/mcis.BenchmarkInfo'
        type: array
    type: object
  mcis.GeoLocation:
    properties:
      briefAddr:
        type: string
      cloudType:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      nativeRegion:
        type: string
    type: object
  mcis.McisCmdReq:
    properties:
      command:
        type: string
      ip:
        type: string
      mcis_id:
        type: string
      ssh_key:
        type: string
      user_name:
        type: string
      vm_id:
        type: string
    type: object
  mcis.McisPolicyInfo:
    properties:
      Id:
        description: MCIS Id (generated ID by the Name)
        type: string
      Name:
        description: MCIS Name (for request)
        type: string
      actionLog:
        type: string
      description:
        type: string
      policy:
        items:
          $ref: '#/definitions/mcis.Policy'
        type: array
    type: object
  mcis.McisRecommendReq:
    properties:
      max_result_num:
        type: string
      placement_algo:
        type: string
      placement_param:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      vm_req:
        items:
          $ref: '#/definitions/mcis.TbVmRecommendReq'
        type: array
    type: object
  mcis.Policy:
    properties:
      autoAction:
        $ref: '#/definitions/mcis.AutoAction'
      autoCondition:
        $ref: '#/definitions/mcis.AutoCondition'
      status:
        type: string
    type: object
  mcis.RegionInfo:
    properties:
      region:
        type: string
      zone:
        type: string
    type: object
  mcis.RestGetAllBenchmarkRequest:
    properties:
      host:
        type: string
    type: object
  mcis.RestGetAllMcisPolicyResponse:
    properties:
      mcisPolicy:
        items:
          $ref: '#/definitions/mcis.McisPolicyInfo'
        type: array
    type: object
  mcis.RestGetAllMcisResponse:
    properties:
      mcis:
        items:
          $ref: '#/definitions/mcis.TbMcisInfo'
        type: array
    type: object
  mcis.RestGetBenchmarkRequest:
    properties:
      host:
        type: string
    type: object
  mcis.RestPostCmdMcisResponse:
    properties:
      mcis_id:
        type: string
      result:
        type: string
      vm_id:
        type: string
      vm_ip:
        type: string
    type: object
  mcis.RestPostCmdMcisResponseWrapper:
    properties:
      result_array:
        items:
          $ref: '#/definitions/mcis.RestPostCmdMcisResponse'
        type: array
    type: object
  mcis.RestPostCmdMcisVmResponse:
    properties:
      result:
        type: string
    type: object
  mcis.RestPostMcisRecommandResponse:
    properties:
      placement_algo:
        type: string
      placement_param:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      vm_recommend:
        description: Vm_req          []TbVmRecommendReq    `json:"vm_req"`
        items:
          $ref: '#/definitions/mcis.TbVmRecommendInfo'
        type: array
    type: object
  mcis.SpiderVMInfo:
    properties:
      iid:
        $ref: '#/definitions/common.IID'
        description: Fields for response
      imageIId:
        $ref: '#/definitions/common.IID'
      imageName:
        type: string
      keyPairIId:
        $ref: '#/definitions/common.IID'
      keyPairName:
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        description: Fields for request
        type: string
      networkInterface:
        description: ex) eth0
        type: string
      privateDNS:
        type: string
      privateIP:
        type: string
      publicDNS:
        type: string
      publicIP:
        type: string
      region:
        $ref: '#/definitions/mcis.RegionInfo'
        description: ex) {us-east1, us-east1-c} or {ap-northeast-2}
      securityGroupIIds:
        description: AWS, ex) sg-0b7452563e1121bb6
        items:
          $ref: '#/definitions/common.IID'
        type: array
      securityGroupNames:
        items:
          type: string
        type: array
      startTime:
        description: 'Timezone: based on cloud-barista server location.'
        type: string
      subnetIID:
        $ref: '#/definitions/common.IID'
        description: AWS, ex) subnet-8c4a53e4
      subnetName:
        type: string
      vmblockDisk:
        description: ex)
        type: string
      vmbootDisk:
        description: ex) /dev/sda1
        type: string
      vmspecName:
        description: Fields for both request and response
        type: string
      vmuserId:
        description: ex) user1
        type: string
      vmuserPasswd:
        type: string
      vpcIID:
        $ref: '#/definitions/common.IID'
      vpcname:
        type: string
    type: object
  mcis.TbMcisInfo:
    properties:
      description:
        type: string
      id:
        type: string
      installMonAgent:
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no] default:yes)
        example: '[yes, no]'
        type: string
      label:
        type: string
      name:
        type: string
      placement_algo:
        type: string
      status:
        type: string
      targetAction:
        type: string
      targetStatus:
        type: string
      vm:
        items:
          $ref: '#/definitions/mcis.TbVmInfo'
        type: array
    type: object
  mcis.TbMcisReq:
    properties:
      description:
        type: string
      installMonAgent:
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no] default:yes)
        example: '[yes, no]'
        type: string
      label:
        type: string
      name:
        type: string
      placement_algo:
        type: string
      vm:
        items:
          $ref: '#/definitions/mcis.TbVmReq'
        type: array
    type: object
  mcis.TbVmInfo:
    properties:
      connectionName:
        type: string
      cspViewVmDetail:
        $ref: '#/definitions/mcis.SpiderVMInfo'
      description:
        type: string
      id:
        type: string
      imageId:
        type: string
      label:
        type: string
      location:
        $ref: '#/definitions/mcis.GeoLocation'
      monAgentStatus:
        description: Montoring agent status
        example: '[installed, notInstalled, failed]'
        type: string
      name:
        type: string
      privateDNS:
        type: string
      privateIP:
        type: string
      publicDNS:
        type: string
      publicIP:
        type: string
      region:
        $ref: '#/definitions/mcis.RegionInfo'
        description: 2. Provided by CB-Spider
      securityGroupIds:
        items:
          type: string
        type: array
      specId:
        type: string
      sshKeyId:
        type: string
      status:
        description: 3. Required by CB-Tumblebug
        type: string
      subnetId:
        type: string
      targetAction:
        type: string
      targetStatus:
        type: string
      vNetId:
        type: string
      vmBlockDisk:
        type: string
      vmBootDisk:
        description: ex) /dev/sda1
        type: string
      vmUserAccount:
        type: string
      vmUserPassword:
        type: string
    type: object
  mcis.TbVmPriority:
    properties:
      priority:
        type: string
      vm_spec:
        $ref: '#/definitions/mcir.TbSpecInfo'
    type: object
  mcis.TbVmRecommendInfo:
    properties:
      placement_algo:
        type: string
      placement_param:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      vm_priority:
        items:
          $ref: '#/definitions/mcis.TbVmPriority'
        type: array
      vm_req:
        $ref: '#/definitions/mcis.TbVmRecommendReq'
    type: object
  mcis.TbVmRecommendReq:
    properties:
      disk_size:
        type: string
      max_result_num:
        type: string
      memory_size:
        type: string
      placement_algo:
        type: string
      placement_param:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      request_name:
        type: string
      vcpu_size:
        type: string
    type: object
  mcis.TbVmReq:
    properties:
      connectionName:
        type: string
      description:
        type: string
      imageId:
        type: string
      label:
        type: string
      name:
        type: string
      securityGroupIds:
        items:
          type: string
        type: array
      specId:
        type: string
      sshKeyId:
        type: string
      subnetId:
        type: string
      vNetId:
        type: string
      vmUserAccount:
        type: string
      vmUserPassword:
        type: string
    type: object
host: localhost:1323
info:
  contact:
    email: contact-to-cloud-barista@googlegroups.com
    name: API Support
    url: http://cloud-barista.github.io
  description: CB-Tumblebug REST API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: CB-Tumblebug REST API
  version: latest
paths:
  /config:
    delete:
      consumes:
      - application/json
      description: Delete all configs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all configs
      tags:
      - Config
    get:
      consumes:
      - application/json
      description: List all configs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.RestGetAllConfigResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all configs
      tags:
      - Config
    post:
      consumes:
      - application/json
      description: Create or Update config (SPIDER_REST_URL, DRAGONFLY_REST_URL, ...)
      parameters:
      - description: Key and Value for configuration
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/common.ConfigInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ConfigInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create or Update config
      tags:
      - Config
  /config/{configId}:
    get:
      consumes:
      - application/json
      description: Get config
      parameters:
      - description: Config ID
        in: path
        name: configId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ConfigInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get config
      tags:
      - Config
  /lookupImage:
    get:
      consumes:
      - application/json
      description: Lookup image list
      parameters:
      - description: Specify connectionName
        in: body
        name: connectionName
        required: true
        schema:
          $ref: '#/definitions/mcir.RestLookupImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.SpiderImageList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Lookup image list
      tags:
      - Image
  /lookupImage/{imageId}:
    get:
      consumes:
      - application/json
      description: Lookup image
      parameters:
      - description: Specify connectionName
        in: body
        name: connectionName
        required: true
        schema:
          $ref: '#/definitions/mcir.RestLookupImageRequest'
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.SpiderImageInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Lookup image
      tags:
      - Image
  /lookupSpec:
    get:
      consumes:
      - application/json
      description: Lookup spec list
      parameters:
      - description: Specify connectionName
        in: body
        name: connectionName
        required: true
        schema:
          $ref: '#/definitions/mcir.RestLookupSpecRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.SpiderSpecList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Lookup spec list
      tags:
      - Spec
  /lookupSpec/{specName}:
    get:
      consumes:
      - application/json
      description: Lookup spec
      parameters:
      - description: Specify connectionName
        in: body
        name: connectionName
        required: true
        schema:
          $ref: '#/definitions/mcir.RestLookupSpecRequest'
      - description: Spec name
        in: path
        name: specName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.SpiderSpecInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Lookup spec
      tags:
      - Spec
  /ns:
    delete:
      consumes:
      - application/json
      description: Delete all namespaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all namespaces
      tags:
      - Namespace
    get:
      consumes:
      - application/json
      description: List all namespaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.RestGetAllNsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all namespaces
      tags:
      - Namespace
    post:
      consumes:
      - application/json
      description: Create namespace
      parameters:
      - description: Details for a new namespace
        in: body
        name: nsReq
        required: true
        schema:
          $ref: '#/definitions/common.NsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NsInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create namespace
      tags:
      - Namespace
  /ns/{nsId}:
    delete:
      consumes:
      - application/json
      description: Delete namespace
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete namespace
      tags:
      - Namespace
    get:
      consumes:
      - application/json
      description: Get namespace
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NsInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get namespace
      tags:
      - Namespace
  /ns/{nsId}/benchmark/mcis/{mcisId}:
    get:
      consumes:
      - application/json
      description: Get MCIS
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      - description: Host IP address to benchmark
        in: body
        name: hostIP
        required: true
        schema:
          $ref: '#/definitions/mcis.RestGetBenchmarkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.BenchmarkInfoArray'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get MCIS
      tags:
      - MCIS
  /ns/{nsId}/benchmarkall/mcis/{mcisId}:
    get:
      consumes:
      - application/json
      description: List all MCISs
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      - description: Host IP address to benchmark
        in: body
        name: hostIP
        required: true
        schema:
          $ref: '#/definitions/mcis.RestGetAllBenchmarkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.BenchmarkInfoArray'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all MCISs
      tags:
      - MCIS
  /ns/{nsId}/cmd/mcis/{mcisId}:
    post:
      consumes:
      - application/json
      description: Send a command to specified MCIS
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      - description: MCIS Command Request
        in: body
        name: mcisCmdReq
        required: true
        schema:
          $ref: '#/definitions/mcis.McisCmdReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.RestPostCmdMcisResponseWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Send a command to specified MCIS
      tags:
      - MCIS
  /ns/{nsId}/cmd/mcis/{mcisId}/vm/{vmId}:
    post:
      consumes:
      - application/json
      description: Send a command to specified VM
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      - description: MCIS Command Request
        in: body
        name: mcisCmdReq
        required: true
        schema:
          $ref: '#/definitions/mcis.McisCmdReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.RestPostCmdMcisVmResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Send a command to specified VM
      tags:
      - MCIS
  /ns/{nsId}/install/mcis/{mcisId}:
    post:
      consumes:
      - application/json
      description: Install the benchmark agent to specified MCIS
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      - description: MCIS Command Request
        in: body
        name: mcisCmdReq
        required: true
        schema:
          $ref: '#/definitions/mcis.McisCmdReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.AgentInstallContentWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Install the benchmark agent to specified MCIS
      tags:
      - MCIS
  /ns/{nsId}/mcis:
    delete:
      consumes:
      - application/json
      description: Delete all MCISs
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all MCISs
      tags:
      - MCIS
    get:
      consumes:
      - application/json
      description: List all MCISs
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.RestGetAllMcisResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all MCISs
      tags:
      - MCIS
    post:
      consumes:
      - application/json
      description: Create MCIS
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details for an MCIS object
        in: body
        name: mcisReq
        required: true
        schema:
          $ref: '#/definitions/mcis.TbMcisReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.TbMcisInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create MCIS
      tags:
      - MCIS
  /ns/{nsId}/mcis/{mcisId}:
    delete:
      consumes:
      - application/json
      description: Delete MCIS
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete MCIS
      tags:
      - MCIS
    get:
      consumes:
      - application/json
      description: Get MCIS
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.TbMcisInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get MCIS
      tags:
      - MCIS
  /ns/{nsId}/mcis/{mcisId}/vm:
    post:
      consumes:
      - application/json
      description: Create VM in specified MCIS
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      - description: Details for an VM object
        in: body
        name: vmReq
        required: true
        schema:
          $ref: '#/definitions/mcis.TbVmReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.TbVmInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create VM in specified MCIS
      tags:
      - MCIS
  /ns/{nsId}/mcis/{mcisId}/vm/{vmId}:
    delete:
      consumes:
      - application/json
      description: Delete MCIS
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete MCIS
      tags:
      - MCIS
    get:
      consumes:
      - application/json
      description: Get MCIS
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.TbVmInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get MCIS
      tags:
      - MCIS
  /ns/{nsId}/mcis/recommend:
    post:
      consumes:
      - application/json
      description: Get MCIS recommendation
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details for an MCIS object
        in: body
        name: mcisRecommendReq
        required: true
        schema:
          $ref: '#/definitions/mcis.McisRecommendReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.RestPostMcisRecommandResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get MCIS recommendation
      tags:
      - MCIS
  /ns/{nsId}/monitoring/install/mcis/{mcisId}:
    post:
      consumes:
      - application/json
      description: InstallMonitorAgent MCIS
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details for an MCIS object
        in: body
        name: mcisInfo
        required: true
        schema:
          $ref: '#/definitions/mcis.McisCmdReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSshKeyInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: InstallMonitorAgent MCIS
      tags:
      - Monitor
  /ns/{nsId}/monitoring/mcis/{mcisId}/metric/{metric}:
    get:
      consumes:
      - application/json
      description: GetMonitorData MCIS
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSshKeyInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: GetMonitorData MCIS
      tags:
      - Monitor
  /ns/{nsId}/policy/mcis:
    delete:
      consumes:
      - application/json
      description: Delete all MCIS Policys
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all MCIS Policys
      tags:
      - MCIS Policy
    get:
      consumes:
      - application/json
      description: List all MCIS Policys
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.RestGetAllMcisPolicyResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all MCIS Policys
      tags:
      - MCIS Policy
  /ns/{nsId}/policy/mcis/{mcisId}:
    delete:
      consumes:
      - application/json
      description: Delete MCIS Policy
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete MCIS Policy
      tags:
      - MCIS Policy
    get:
      consumes:
      - application/json
      description: Get MCIS Policy
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: mcisId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.McisPolicyInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get MCIS Policy
      tags:
      - MCIS Policy
    post:
      consumes:
      - application/json
      description: Create MCIS Automation policy
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: MCIS ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details for an MCIS object
        in: body
        name: mcisInfo
        required: true
        schema:
          $ref: '#/definitions/mcis.McisPolicyInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcis.McisPolicyInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create MCIS Automation policy
      tags:
      - MCIS Policy
  /ns/{nsId}/resources/fetchImages:
    post:
      consumes:
      - application/json
      description: Fetch images
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Fetch images
      tags:
      - Image
  /ns/{nsId}/resources/fetchSpecs:
    post:
      consumes:
      - application/json
      description: Fetch specs
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Fetch specs
      tags:
      - Spec
  /ns/{nsId}/resources/filterSpecs:
    post:
      consumes:
      - application/json
      description: Filter specs
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Filter for filtering specs
        in: body
        name: specFilter
        schema:
          $ref: '#/definitions/mcir.TbSpecInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.RestFilterSpecsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Filter specs
      tags:
      - Spec
  /ns/{nsId}/resources/filterSpecsByRange:
    post:
      consumes:
      - application/json
      description: Filter specs by range
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Filter for range-filtering specs
        in: body
        name: specRangeFilter
        schema:
          $ref: '#/definitions/mcir.FilterSpecsByRangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.RestFilterSpecsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Filter specs by range
      tags:
      - Spec
  /ns/{nsId}/resources/image:
    delete:
      consumes:
      - application/json
      description: Delete all images
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all images
      tags:
      - Image
    get:
      consumes:
      - application/json
      description: List all images
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.RestGetAllImageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all images
      tags:
      - Image
    post:
      consumes:
      - application/json
      description: Register image
      parameters:
      - description: registerWithInfo or registerWithId
        in: query
        name: registeringMethod
        required: true
        type: string
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details for an image object
        in: body
        name: imageInfo
        schema:
          $ref: '#/definitions/mcir.TbImageInfo'
      - description: name, connectionName and cspImageId
        in: body
        name: imageId
        schema:
          $ref: '#/definitions/mcir.TbImageReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbImageInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Register image
      tags:
      - Image
  /ns/{nsId}/resources/image/{imageId}:
    delete:
      consumes:
      - application/json
      description: Delete image
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete image
      tags:
      - Image
    get:
      consumes:
      - application/json
      description: Get image
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbImageInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get image
      tags:
      - Image
  /ns/{nsId}/resources/searchImage:
    get:
      consumes:
      - application/json
      description: Search image
      parameters:
      - description: Keywords
        in: body
        name: keywords
        required: true
        schema:
          $ref: '#/definitions/mcir.RestSearchImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.RestGetAllImageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Search image
      tags:
      - Image
  /ns/{nsId}/resources/securityGroup:
    delete:
      consumes:
      - application/json
      description: Delete all Security Groups
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all Security Groups
      tags:
      - Security Group
    get:
      consumes:
      - application/json
      description: List all Security Groups
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.RestGetAllSecurityGroupResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all Security Groups
      tags:
      - Security Group
    post:
      consumes:
      - application/json
      description: Create Security Group
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details for an securityGroup object
        in: body
        name: securityGroupReq
        required: true
        schema:
          $ref: '#/definitions/mcir.TbSecurityGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSecurityGroupInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create Security Group
      tags:
      - Security Group
  /ns/{nsId}/resources/securityGroup/{securityGroupId}:
    delete:
      consumes:
      - application/json
      description: Delete Security Group
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Security Group ID
        in: path
        name: securityGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete Security Group
      tags:
      - Security Group
    get:
      consumes:
      - application/json
      description: Get Security Group
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Security Group ID
        in: path
        name: securityGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSecurityGroupInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get Security Group
      tags:
      - Security Group
  /ns/{nsId}/resources/spec:
    delete:
      consumes:
      - application/json
      description: Delete all specs
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all specs
      tags:
      - Spec
    get:
      consumes:
      - application/json
      description: List all specs
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.RestGetAllSpecResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all specs
      tags:
      - Spec
    post:
      consumes:
      - application/json
      description: Register spec
      parameters:
      - description: registerWithInfo or else
        in: query
        name: registeringMethod
        required: true
        type: string
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details for an spec object
        in: body
        name: specInfo
        schema:
          $ref: '#/definitions/mcir.TbSpecInfo'
      - description: name, connectionName and cspSpecName
        in: body
        name: specName
        schema:
          $ref: '#/definitions/mcir.TbSpecReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSpecInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Register spec
      tags:
      - Spec
  /ns/{nsId}/resources/spec/{specId}:
    delete:
      consumes:
      - application/json
      description: Delete spec
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Spec ID
        in: path
        name: specId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete spec
      tags:
      - Spec
    get:
      consumes:
      - application/json
      description: Get spec
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Spec ID
        in: path
        name: specId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSpecInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get spec
      tags:
      - Spec
    put:
      consumes:
      - application/json
      description: Update spec
      parameters:
      - description: Details for an spec object
        in: body
        name: specInfo
        required: true
        schema:
          $ref: '#/definitions/mcir.TbSpecInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSpecInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Update spec
      tags:
      - Spec
  /ns/{nsId}/resources/sshKey:
    delete:
      consumes:
      - application/json
      description: Delete all SSH Keys
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all SSH Keys
      tags:
      - SSH Key
    get:
      consumes:
      - application/json
      description: List all SSH Keys
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.RestGetAllSshKeyResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all SSH Keys
      tags:
      - SSH Key
    post:
      consumes:
      - application/json
      description: Create SSH Key
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details for an SSH Key object
        in: body
        name: sshKeyInfo
        required: true
        schema:
          $ref: '#/definitions/mcir.TbSshKeyReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSshKeyInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create SSH Key
      tags:
      - SSH Key
  /ns/{nsId}/resources/sshKey/{sshKeyId}:
    delete:
      consumes:
      - application/json
      description: Delete SSH Key
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: SSH Key ID
        in: path
        name: sshKeyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete SSH Key
      tags:
      - SSH Key
    get:
      consumes:
      - application/json
      description: Get SSH Key
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: SSH Key ID
        in: path
        name: sshKeyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSshKeyInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get SSH Key
      tags:
      - SSH Key
  /ns/{nsId}/resources/vNet:
    delete:
      consumes:
      - application/json
      description: Delete all VNets
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all VNets
      tags:
      - VNet
    get:
      consumes:
      - application/json
      description: List all VNets
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.RestGetAllVNetResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all VNets
      tags:
      - VNet
    post:
      consumes:
      - application/json
      description: Create VNet
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details for an VNet object
        in: body
        name: vNetReq
        required: true
        schema:
          $ref: '#/definitions/mcir.TbVNetReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbVNetInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create VNet
      tags:
      - VNet
  /ns/{nsId}/resources/vNet/{vNetId}:
    delete:
      consumes:
      - application/json
      description: Delete VNet
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: VNet ID
        in: path
        name: vNetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete VNet
      tags:
      - VNet
    get:
      consumes:
      - application/json
      description: Get VNet
      parameters:
      - description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: VNet ID
        in: path
        name: vNetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbVNetInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get VNet
      tags:
      - VNet
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
