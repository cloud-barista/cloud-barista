package main

import (
	"fmt"
	"github.com/cloud-barista/cb-dragonfly/pkg/api"
	"runtime"
	"sync"
	"time"

	"github.com/cloud-barista/cb-dragonfly/pkg/storage/metricstore/influxdb"
	v1 "github.com/cloud-barista/cb-dragonfly/pkg/storage/metricstore/influxdb/v1"
	"github.com/cloud-barista/cb-dragonfly/pkg/util"

	"github.com/cloud-barista/cb-dragonfly/pkg/api/core/alert/template"
	grpc "github.com/cloud-barista/cb-dragonfly/pkg/api/grpc/server"
	"github.com/cloud-barista/cb-dragonfly/pkg/modules/procedure"
	//_ "github.com/swaggo/gin-swagger/example/basic/docs" // docs is generated by Swag CLI, you have to import it.
)

// @title CB-Dragonfly REST API
// @version 1.0
// @description CB-Dragonfly REST API

// @contact.name API Support
// @contact.url http://cloud-barista.github.io
// @contact.email contact-to-cloud-barista@googlegroups.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:9090
// @BasePath /dragonfly
// @securityDefinitions.basic BasicAuth
func main() {

	time.Sleep(5 * time.Second)

	// 멀티 CPU 기반 고루틴 병렬 처리 활성화
	runtime.GOMAXPROCS(runtime.NumCPU())

	// 알람 모듈 템플릿 등록
	template.RegisterTemplate()

	// InfluxDB 클라이언트 설정
	err := influxdb.NewStorage(influxdb.V1, v1.Config{})
	if err != nil {
		util.GetLogger().Error(fmt.Sprintf("failed to initialize influxDB, error=%s", err))
		panic(err)
	}

	// Push, Pull 메커니즘 기반 모니터링 모듈 실행
	var wg sync.WaitGroup
	if err := procedure.NewMechanism(&wg); err != nil {
		panic(err)
	}

	// 모니터링 API 서버 실행
	wg.Add(1)
	apiServer, err := api.NewAPIServer()
	if err != nil {
		util.GetLogger().Error(fmt.Sprintf("failed to initialize api server, error=%s", err))
		panic(err)
	}
	go apiServer.StartAPIServer(&wg)

	// 모니터링 gRPC 서버 실행
	wg.Add(1)
	go grpc.StartGRPCServer()

	// 모든 고루틴이 종료될 때까지 대기
	wg.Wait()
}
